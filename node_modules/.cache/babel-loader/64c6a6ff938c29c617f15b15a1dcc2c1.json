{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction getRange(start, end) {\n  return [...Array(end - start + 1)].map((_, i) => start + i);\n}\n\nexports.getRange = getRange;\n\nfunction getPageInfo(params) {\n  const limit = params.limit,\n        pageCount = params.pageCount,\n        total = params.total,\n        page = params.page;\n  const totalPages = Math.ceil(total / limit);\n  const totalResults = total;\n  let currentPage = page;\n\n  if (currentPage < 1) {\n    currentPage = 1;\n  }\n\n  if (currentPage > totalPages) {\n    currentPage = totalPages;\n  }\n\n  let firstPage = Math.max(1, currentPage - Math.floor(pageCount / 2));\n  let lastPage = Math.min(totalPages, currentPage + Math.floor(pageCount / 2));\n\n  if (lastPage - firstPage + 1 < pageCount) {\n    if (currentPage < totalPages / 2) {\n      lastPage = Math.min(totalPages, lastPage + (pageCount - (lastPage - firstPage)));\n    } else {\n      firstPage = Math.max(1, firstPage - (pageCount - (lastPage - firstPage)));\n    }\n  }\n\n  if (lastPage - firstPage + 1 > pageCount) {\n    if (currentPage > totalPages / 2) {\n      firstPage = firstPage + 1;\n    } else {\n      lastPage = lastPage - 1;\n    }\n  }\n\n  const pages = Math.min(lastPage - firstPage + 1, totalPages);\n  const previousPage = currentPage - 1;\n  const nextPage = currentPage + 1;\n  const hasPreviousPage = currentPage > 1;\n  const hasNextPage = currentPage < totalPages;\n  const firstResult = limit * (currentPage - 1);\n  const lastResult = limit * currentPage - 1;\n  const results = Math.min(lastResult - firstResult + 1, totalResults);\n  return {\n    totalPages,\n    pages,\n    currentPage,\n    firstPage,\n    lastPage,\n    previousPage,\n    nextPage,\n    hasPreviousPage,\n    hasNextPage,\n    totalResults,\n    results,\n    firstResult,\n    lastResult\n  };\n}\n\nexports.getPageInfo = getPageInfo;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getRange(start, end) {\n    return [...Array(end - start + 1)].map((_, i) => start + i);\n}\nexports.getRange = getRange;\nfunction getPageInfo(params) {\n    const { limit, pageCount, total, page } = params;\n    const totalPages = Math.ceil(total / limit);\n    const totalResults = total;\n    let currentPage = page;\n    if (currentPage < 1) {\n        currentPage = 1;\n    }\n    if (currentPage > totalPages) {\n        currentPage = totalPages;\n    }\n    let firstPage = Math.max(1, currentPage - Math.floor(pageCount / 2));\n    let lastPage = Math.min(totalPages, currentPage + Math.floor(pageCount / 2));\n    if (lastPage - firstPage + 1 < pageCount) {\n        if (currentPage < totalPages / 2) {\n            lastPage = Math.min(totalPages, lastPage + (pageCount - (lastPage - firstPage)));\n        }\n        else {\n            firstPage = Math.max(1, firstPage - (pageCount - (lastPage - firstPage)));\n        }\n    }\n    if (lastPage - firstPage + 1 > pageCount) {\n        if (currentPage > totalPages / 2) {\n            firstPage = firstPage + 1;\n        }\n        else {\n            lastPage = lastPage - 1;\n        }\n    }\n    const pages = Math.min(lastPage - firstPage + 1, totalPages);\n    const previousPage = currentPage - 1;\n    const nextPage = currentPage + 1;\n    const hasPreviousPage = currentPage > 1;\n    const hasNextPage = currentPage < totalPages;\n    const firstResult = limit * (currentPage - 1);\n    const lastResult = limit * currentPage - 1;\n    const results = Math.min(lastResult - firstResult + 1, totalResults);\n    return {\n        totalPages,\n        pages,\n        currentPage,\n        firstPage,\n        lastPage,\n        previousPage,\n        nextPage,\n        hasPreviousPage,\n        hasNextPage,\n        totalResults,\n        results,\n        firstResult,\n        lastResult\n    };\n}\nexports.getPageInfo = getPageInfo;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}